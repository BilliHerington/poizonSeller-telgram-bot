package telegram

import (
	"crypto/rand"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"math/big"
	"net/url"
	"sailerBot/logger"
	"sailerBot/sheet"
	"strconv"
	"strings"
)

//------------------------------------------------------------------------------------------------MAIN------------------------------------------------------------------------------------

func HandleCallback(bot *tgbotapi.BotAPI, callbackQuery *tgbotapi.CallbackQuery) {
	logger.Debug.Println("HandleCallback running")
	mu.Lock()
	context, exists := userContexts[callbackQuery.Message.Chat.ID]
	if !exists {
		context = &UserContext{}
		userContexts[callbackQuery.Message.Chat.ID] = context
	}
	mu.Unlock()

	switch callbackQuery.Data {
	case "calculateShip":
		handleDeletePreviousMessage(bot, callbackQuery)
		handleGetProductPrice(bot, callbackQuery.Message, context)
	case "makeOrder":
		context.isMakingOrder = true
		handleDeletePreviousMessage(bot, callbackQuery)
		handleGetProductPrice(bot, callbackQuery.Message, context)
	case "exchangeRate":
		handleExchangeRate(bot, callbackQuery.Message)
	case "cart":
		handleDeletePreviousMessage(bot, callbackQuery)
		cart(bot, callbackQuery.Message)
	case "gotoPayment":
		gotoPayment(bot, callbackQuery.Message, context)
	case "sendVideo":
		sendVideo(bot, callbackQuery.Message)
	case "approvePayment":
		approvePayment(bot, callbackQuery.Message, context)
	case "changeData":
		changeData(bot, callbackQuery.Message, context)
	case "deleteProduct":
		deleteProductFromCart(bot, callbackQuery.Message, context)
	case "clearCart":
		clearCart(bot, callbackQuery.Message)
	//-----MENU------
	case "shoesMenu":
		productMenuCallback(bot, callbackQuery, context, "shoes")
	case "sneakersMenu":
		productMenuCallback(bot, callbackQuery, context, "sneakers")
	case "apparelMenu":
		productMenuCallback(bot, callbackQuery, context, "apparel")
	case "accessoriesMenu":
		productMenuCallback(bot, callbackQuery, context, "accessories")
	case "bagsMenu":
		productMenuCallback(bot, callbackQuery, context, "bags")
	case "toys&collectiblesMenu":
		productMenuCallback(bot, callbackQuery, context, "toys&collectibles")
	case "backMainMenu":
		context.isMakingOrder = false
		//context.
		handleDeletePreviousMessage(bot, callbackQuery)
		handleStartCommand(bot, callbackQuery.Message)
	}
}
func handleTextMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	logger.Debug.Println("handleTextMessage running")
	mu.Lock()
	context, exists := userContexts[message.Chat.ID]
	if !exists {
		context = &UserContext{}
		userContexts[message.Chat.ID] = context
	}
	mu.Unlock()
	logger.Debug.Printf("User send message: %s", message.Text)

	switch context.State {
	case StateWaitingForProductPrice:
		handleProductPrice(bot, message, context)
	case StateWaitingForProductURL:
		handleProductLink(bot, message, context)
	case StateWaitingForProductSize:
		handleSelectSize(bot, message, context)
	case StateWaitingForPhoneNumber:
		handlePhoneNumber(bot, message, context)
	case StateWaitingForFIO:
		handleFIO(bot, message, context)
	case StateWaitingForAddress:
		handleAddress(bot, message, context)
	case StateWaitingForDeletePosition:
		handleDeleteFromCart(bot, message, context)
	default:
		handleUnknownMessage(bot, message)
	}
}
func handleDeletePreviousMessage(bot *tgbotapi.BotAPI, callbackQuery *tgbotapi.CallbackQuery) {
	logger.Debug.Println("handleDeletePreviousMessage running")
	deleteMessage := tgbotapi.NewDeleteMessage(callbackQuery.Message.Chat.ID, callbackQuery.Message.MessageID)
	_, err := bot.Request(deleteMessage)
	if err != nil {
		somethingWentWrong(bot, callbackQuery.Message)
		logger.Error.Println(err)
	}
}
func somethingWentWrong(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	logger.Debug.Println("somethingWentWrong running")
	msg := tgbotapi.NewMessage(message.Chat.ID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º.")
	_, err := bot.Send(msg)
	if err != nil {
		logger.Error.Println(err)
	}
	gif := tgbotapi.NewAnimation(message.Chat.ID, tgbotapi.FilePath("config/telegram/images/cat.gif"))
	_, err = bot.Send(gif)
	if err != nil {
		logger.Error.Println(err)
	}
}
func handleStartCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	logger.Debug.Println("handleStartCommand running")
	msg := "–Ø poizonSellerBot, –ª—É—á—à–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å —Å–∞–π—Ç–∞ POIZON\n\n‚ùóÔ∏è –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –æ–Ω –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å"
	photo := tgbotapi.NewPhoto(message.Chat.ID, tgbotapi.FilePath("config/telegram/images/start.jpg"))
	photo.Caption = msg
	inlineKeyBoard := startMenuKeyboard()
	photo.ReplyMarkup = &inlineKeyBoard
	_, err := bot.Send(photo)
	if err != nil {
		somethingWentWrong(bot, message)
		logger.Error.Println(err)
	}
}
func handleUnknownMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	logger.Debug.Println("handleUnknownMessage running")
	msg := tgbotapi.NewMessage(message.Chat.ID, "–Ø –≤–∞—Å –Ω–µ –ø–æ–º–Ω–∏–º–∞—é")
	_, err := bot.Send(msg)
	if err != nil {
		somethingWentWrong(bot, message)
		logger.Error.Println(err)
	}
}

//--------------------------------------------------------------------------------------------MENU----------------------------------------------------------------------------------------

func makingOrder(bot *tgbotapi.BotAPI, callbackQuery *tgbotapi.CallbackQuery, context *UserContext) {
	logger.Debug.Println("makingOrder running")
	calculateShipCoastByProduct(callbackQuery)
	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "–û—Ç–ø—Ä–∞–≤—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä üîó")
	_, err := bot.Send(msg)
	if err != nil {
		somethingWentWrong(bot, callbackQuery.Message)
		logger.Error.Println(err)
	}
	context.State = StateWaitingForProductURL
}
func productMenuCallback(bot *tgbotapi.BotAPI, callbackQuery *tgbotapi.CallbackQuery, context *UserContext, productCategory string) {
	logger.Debug.Println("productMenuCallback running")
	handleDeletePreviousMessage(bot, callbackQuery)
	setUserData(callbackQuery.Message.Chat.ID, "productCategory", productCategory)
	if context.isMakingOrder {
		makingOrder(bot, callbackQuery, context)
	} else {
		handleShipCoast(bot, callbackQuery, context)
	}
}
func sendVideo(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	video := tgbotapi.NewVideo(message.Chat.ID, tgbotapi.FilePath("config/telegram/images/howtoGetPrice.mp4"))
	_, err := bot.Send(video)
	if err != nil {
		somethingWentWrong(bot, message)
		logger.Error.Println(err)
	}
}
func handleExchangeRate(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	logger.Debug.Println("handleRate running")
	text := "–ü–æ—á–µ–º—É –∫—É—Ä—Å —é–∞–Ω—è —Ç–∞–∫ –≤—ã—Å–æ–∫?‚ùìüá®üá≥\n–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –†–§ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ã—á–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ, —Ç–∞–∫ –∫–∞–∫ –≤ –±–∞–Ω–∫–∞—Ö –∏ —á–µ—Ä–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤ —Ü–µ–Ω–∞ —é–∞–Ω—è –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ 3,5 —Ä—É–±–ª—è –≤—ã—à–µ. –ú—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä—É–±–ª–∏ –≤ —é–∞–Ω–∏, —Å—Ç–∞—Ä–∞—è—Å—å –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏."
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ò∞", "backMainMenu")))
	_, err := bot.Send(msg)
	if err != nil {
		somethingWentWrong(bot, message)
		logger.Error.Println(err)
	}
}
func categoryMenu(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	logger.Debug.Println("productsMenu running")
	msg := tgbotapi.NewMessage(message.Chat.ID, "–•–æ—Ä–æ—à–æ, –∞ —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ—Ç–æ—Ä—É—é –≤—Ö–æ–¥–∏—Ç –∂–µ–ª–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä, —ç—Ç–æ —Ç–∞–∫ –∂–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–Ω–µ—á–Ω—É—é —Ü–µ–Ω—É")
	msg.ReplyMarkup = productMenuKeyboard()
	_, err := bot.Send(msg)
	if err != nil {
		somethingWentWrong(bot, message)
		logger.Error.Println(err)
	}
}

//-------------------------------------------------------------------------------------------Products------------------------------------------------------------------------------------

func handleGetProductPrice(bot *tgbotapi.BotAPI, message *tgbotapi.Message, context *UserContext) {
	logger.Debug.Println("handleGetProductPrice running")
	messageText := "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ —é–∞–Ω—è—Öüí∏. –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞, –∏–Ω–∞—á–µ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω. –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞–Ω–∞ –Ω–∞ –≤–∏–¥–µ–æ."
	msg := tgbotapi.NewMessage(message.Chat.ID, messageText)
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æüé¨", "sendVideo")))
	_, err := bot.Send(msg)
	if err != nil {
		somethingWentWrong(bot, message)
		logger.Error.Println(err)
	}
	context.State = StateWaitingForProductPrice
}

func handleProductPrice(bot *tgbotapi.BotAPI, message *tgbotapi.Message, context *UserContext) {
	logger.Debug.Println("handleProductPrice running")

	flPrice, err := strconv.ParseFloat(message.Text, 64)
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã")
		_, err = bot.Send(msg)
		if err != nil {
			somethingWentWrong(bot, message)
			logger.Error.Println(err)
		}
	} else {
		if flPrice < 0 {
			flPrice = -flPrice
		}
		redactedPrice := strconv.FormatFloat(flPrice, 'f', 0, 64)
		setUserData(message.Chat.ID, "productPriceRaw", redactedPrice)
		categoryMenu(bot, message)
	}
}
func handleProductLink(bot *tgbotapi.BotAPI, message *tgbotapi.Message, context *UserContext) {
	logger.Debug.Println("handleProductLink running")
	if isValidURL(message.Text) {
		setUserData(message.Chat.ID, "productURL", message.Text)

		logger.Debug.Println(getUserData(message.Chat.ID, "productURL"))

		msg := tgbotapi.NewMessage(message.Chat.ID, "üé®–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏ —Ü–≤–µ—Ç. \n–ü—Ä–∏–º–µ—Ä:\n11 US Men, Lucky Green")
		_, err := bot.Send(msg)
		if err != nil {
			somethingWentWrong(bot, message)
			logger.Error.Println(err)
		}

		context.State = StateWaitingForProductSize
	} else {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏‚ùå. –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –≤–≤–∏–¥–µ: \nhttps://www.poizon.com/product/–í–ê–®_–¢–û–í–ê–†")
		_, err := bot.Send(msg)
		if err != nil {
			somethingWentWrong(bot, message)
			logger.Error.Println(err)
		}
	}
}
func handleSelectSize(bot *tgbotapi.BotAPI, message *tgbotapi.Message, context *UserContext) {
	logger.Debug.Println("handleSelectSize running")
	setUserData(message.Chat.ID, "productSize", message.Text)
	cart(bot, message)
}

// --------------------------------------------------------------------------------USER-----------------------------------------------------------------------------------------------------
func handlePhoneNumber(bot *tgbotapi.BotAPI, message *tgbotapi.Message, context *UserContext) {
	logger.Debug.Println("handleUserPhoneNumber running")
	setUserData(message.Chat.ID, "userPhoneNumber", message.Text)

	userFIO, _ := getUserData(message.Chat.ID, "userFIO")
	if userFIO == "" {
		msg := tgbotapi.NewMessage(message.Chat.ID, "üë§–§–ò–û\n–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é , –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ(–µ—Å–ª–∏ –∏–º–µ–µ—Ç—Å—è)\n\n–ù–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –§–ò–û –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞")
		_, err := bot.Send(msg)
		if err != nil {
			somethingWentWrong(bot, message)
			logger.Error.Println(err)
		}
		context.State = StateWaitingForFIO
	}
}
func handleFIO(bot *tgbotapi.BotAPI, message *tgbotapi.Message, context *UserContext) {
	logger.Debug.Println("handleFIO running")
	setUserData(message.Chat.ID, "userFIO", message.Text)

	userAddress, _ := getUserData(message.Chat.ID, "userAddress")
	if userAddress == "" {
		msg := tgbotapi.NewMessage(message.Chat.ID, "üè† –î–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n\n–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ CDEK –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–æ—Ä–æ–¥, –£–ª–∏—Ü–∞, –î–æ–º")
		_, err := bot.Send(msg)
		if err != nil {
			somethingWentWrong(bot, message)
			logger.Error.Println(err)
		}
		context.State = StateWaitingForAddress
	}
}
func handleAddress(bot *tgbotapi.BotAPI, message *tgbotapi.Message, context *UserContext) {
	logger.Debug.Println("handleAddress running")
	setUserData(message.Chat.ID, "userAddress", message.Text)
	paymentMessage(bot, message, context)
}
func changeData(bot *tgbotapi.BotAPI, message *tgbotapi.Message, context *UserContext) {
	logger.Debug.Println("changeData running")
	setUserData(message.Chat.ID, "userPhoneNumber", "")
	setUserData(message.Chat.ID, "userFIO", "")
	setUserData(message.Chat.ID, "userAddress", "")
	msg := tgbotapi.NewMessage(message.Chat.ID, "üì±–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É")
	_, err := bot.Send(msg)
	if err != nil {
		somethingWentWrong(bot, message)
		logger.Error.Println(err)
	}
	context.State = StateWaitingForPhoneNumber
}

// --------------------------------------------------------------------------------CART-----------------------------------------------------------------------------------------------------
func cart(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	logger.Debug.Println("cart running")
	addToCart(bot, message)
	readFromCart(bot, message)
}
func readFromCart(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	logger.Debug.Println("readFromCart running")
	allDataFromCart, err := sheet.ReadCart(message.Chat.ID)
	if err != nil {
		logger.Error.Println(err)
		return
	}
	allProductsText := ""
	allCartPrice := 0.0
	priceList := allDataFromCart["productPrice"]
	linkList := allDataFromCart["productLink"]
	sizeList := allDataFromCart["productSize"]
	if priceList != nil && linkList != nil && sizeList != nil {
		for idx := range priceList {
			allProductsText += fmt.Sprintf("‚Ññ: %d\n–¶–µ–Ω–∞: %s\n–°—Å—ã–ª–∫–∞: %s\n–†–∞–∑–º–µ—Ä –∏ –¶–≤–µ—Ç: %s\n------------------------------\n", idx, priceList[idx], linkList[idx], sizeList[idx])
			floatValue, _ := strconv.ParseFloat(priceList[idx], 64)
			allCartPrice += floatValue
		}
		text := fmt.Sprintf(
			"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç %0.f —Ä—É–±.\n–í —ç—Ç—É —Å—É–º–º—É –≤—Ö–æ–¥–∏—Ç –∫–æ–º–∏—Å—Å–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–∏—Ç–∞—é, –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –†–§ –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –∑–∞–∫–∞–∑–∞.\n\n"+
				"üõçÔ∏è –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:\n\n"+allProductsText,
			allCartPrice,
		)
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		msg.ReplyMarkup = cartKeyboard()
		_, err = bot.Send(msg)
		if err != nil {
			somethingWentWrong(bot, message)
			logger.Error.Println(err)
		}
	} else {
		text := fmt.Sprintf("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		msg.ReplyMarkup = emptyCartKeyboard()
		_, err = bot.Send(msg)
		if err != nil {
			somethingWentWrong(bot, message)
			logger.Error.Println(err)
		}
	}
}
func addToCart(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	logger.Debug.Println("addToCart running")
	price, err := getUserData(message.Chat.ID, "productPrice")
	if err != nil {
		logger.Error.Println(err)
	}
	link, err := getUserData(message.Chat.ID, "productURL")
	if err != nil {
		logger.Error.Println(err)
	}
	size, err := getUserData(message.Chat.ID, "productSize")
	if err != nil {
		logger.Error.Println(err)
	}
	if price != "" && link != "" && size != "" {
		err = sheet.AddToCart(message.Chat.ID, price, link, size)
		if err != nil {
			logger.Error.Println(err)
			return
		}
	}
}
func deleteProductFromCart(bot *tgbotapi.BotAPI, message *tgbotapi.Message, context *UserContext) {
	logger.Debug.Println("deleteProductFromCart running")
	setUserData(message.Chat.ID, "productPrice", "")
	setUserData(message.Chat.ID, "productLink", "")
	setUserData(message.Chat.ID, "productSize", "")
	msg := tgbotapi.NewMessage(message.Chat.ID, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä–æ–π")
	_, err := bot.Send(msg)
	if err != nil {
		somethingWentWrong(bot, message)
		logger.Error.Println(err)
	}
	context.State = StateWaitingForDeletePosition
}
func handleDeleteFromCart(bot *tgbotapi.BotAPI, message *tgbotapi.Message, context *UserContext) {
	pos, err := strconv.Atoi(message.Text)
	text := ""
	if err != nil {
		text = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞"
	} else {
		err = sheet.DeleteFromCart(message.Chat.ID, pos)
		if err != nil {
			text = fmt.Sprintf("–¢–æ–≤–∞—Ä ‚Ññ %d –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ", pos)
		}
		text = fmt.Sprintf("–¢–æ–≤–∞—Ä ‚Ññ %d —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", pos)
	}
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞üõí", "cart")))
	_, err = bot.Send(msg)
	if err != nil {
		somethingWentWrong(bot, message)
		logger.Error.Println(err)
	}
}

func clearCart(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	logger.Debug.Println("clearCart running")
	setUserData(message.Chat.ID, "productPrice", "")
	setUserData(message.Chat.ID, "productLink", "")
	setUserData(message.Chat.ID, "productSize", "")
	err := sheet.ClearCart(message.Chat.ID)
	if err != nil {
		logger.Error.Println(err)
		return
	}
	msg := tgbotapi.NewMessage(message.Chat.ID, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ò∞", "backMainMenu")))
	_, err = bot.Send(msg)
	if err != nil {
		somethingWentWrong(bot, message)
		logger.Error.Println(err)
	}
}

// -------------------------------------------------------------------------------PAYMENT-----------------------------------------------------------------------------------------------------
func gotoPayment(bot *tgbotapi.BotAPI, message *tgbotapi.Message, context *UserContext) {
	logger.Debug.Println("gotoPayment running")
	userPhoneNumber, _ := getUserData(message.Chat.ID, "userPhoneNumber")
	if userPhoneNumber == "" {
		msg := tgbotapi.NewMessage(message.Chat.ID, "üì±–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É")
		_, err := bot.Send(msg)
		if err != nil {
			somethingWentWrong(bot, message)
			logger.Error.Println(err)
		}
		context.State = StateWaitingForPhoneNumber
	} else {
		paymentMessage(bot, message, context)
	}
}
func paymentMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message, context *UserContext) {
	//paymentPath := "config/payment/payment.env"
	//paymentData := loadPaymentENV(paymentPath)

	token, err := generateOrderKey("*", 4) // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª–∏–Ω–æ–π 4 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
	if err != nil {
		logger.Error.Println("Error:", err)
		somethingWentWrong(bot, message)
	}

	name, err := getUserData(message.Chat.ID, "userFIO")
	if err != nil {
		logger.Error.Println("Error:", err)
	}

	number, err := getUserData(message.Chat.ID, "userPhoneNumber")
	if err != nil {
		logger.Error.Println("Error:", err)
	}

	address, err := getUserData(message.Chat.ID, "userAddress")
	if err != nil {
		logger.Error.Println("Error:", err)
	}
	payData := loadPaymentDataJSON()
	text := fmt.Sprintf("–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n–§–ò–û: %s\n–ê–¥—Ä–µ—Å—Å: %s\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: %s\n\nüì¶–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–§ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –Ω–∞–ø—Ä—è–º—É—é –°–î–≠–ö—É (‚âà500‚ÇΩ)\n\n"+
		"‚ö†Ô∏è–í—ã–∫—É–ø —Ç–æ–≤–∞—Ä–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. \n–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –ø—Ä–∏ –≤—ã–∫—É–ø–µ –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è —Ü–µ–Ω–∞ , —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä\n\n"+
		"‚ú®–≠—Ç–æ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ:\n%s\n\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n"+
		"üí≥–°–ë–ï–†- %s\n\nüé´–¢–∏–Ω—å–∫–æ—Ñ—Ñ %s\n\n"+
		"üìù–ü—Ä–æ–∏–∑–≤–µ–¥—è –æ–ø–ª–∞—Ç—É –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å—é –¥–∞–Ω–Ω—ã—Ö –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"+
		"\n\n–û–ø–ª–∞—Ç–∏—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ", name, address, number, token, payData.Sber, payData.Tinkoff)
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ", "approvePayment")),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ üîë", "changeData")),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ò∞", "backMainMenu")))
	_, err = bot.Send(msg)
	if err != nil {
		somethingWentWrong(bot, message)
		logger.Error.Println(err)
	}
	context.token = token
}
func approvePayment(bot *tgbotapi.BotAPI, message *tgbotapi.Message, context *UserContext) {
	logger.Debug.Println("approvePayment running")
	alertMsg := tgbotapi.NewMessage(message.Chat.ID, "–í–∞—à –∑–∞–∫–∞–∑ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è‚åõ\n")
	_, err := bot.Send(alertMsg)
	if err != nil {
		somethingWentWrong(bot, message)
	}

	addProducts(bot, message, context)
	addOrder(bot, message, context)
	msg := tgbotapi.NewMessage(message.Chat.ID, "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω‚úÖ\n–ü–æ–∑–∂–µ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä")
	_, err = bot.Send(msg)
	if err != nil {
		logger.Error.Println(err)
		somethingWentWrong(bot, message)
	}
}
func addProducts(bot *tgbotapi.BotAPI, message *tgbotapi.Message, context *UserContext) {
	allDataFromCart, readCartError := sheet.ReadCart(message.Chat.ID)
	if readCartError != nil {
		logger.Error.Println(readCartError)
		somethingWentWrong(bot, message)
	}
	priceList := allDataFromCart["productPrice"]
	linkList := allDataFromCart["productLink"]
	sizeList := allDataFromCart["productSize"]

	for idx, value := range priceList {
		intValue, err := strconv.Atoi(value)
		if err != nil {
			logger.Error.Println(err)
			somethingWentWrong(bot, message)
		}
		err = sheet.AddProductsByToken(context.token, linkList[idx], sizeList[idx], intValue)
		if err != nil {
			logger.Error.Println(err)
			somethingWentWrong(bot, message)
		}
	}
}
func addOrder(bot *tgbotapi.BotAPI, message *tgbotapi.Message, context *UserContext) {
	name, err := getUserData(message.Chat.ID, "userFIO")
	if err != nil {
		logger.Error.Println(err)
		somethingWentWrong(bot, message)
	}
	address, err := getUserData(message.Chat.ID, "userAddress")
	if err != nil {
		logger.Error.Println(err)
		somethingWentWrong(bot, message)
	}
	phone, err := getUserData(message.Chat.ID, "userPhoneNumber")
	if err != nil {
		logger.Error.Println(err)
		somethingWentWrong(bot, message)
	}
	err = sheet.AddOrder(message.Chat.ID, context.token, name, address, phone, "PaymentNotApproved")
	if err != nil {
		logger.Error.Println(err)
		somethingWentWrong(bot, message)
	}
}

// --------------------------------------------------------------------------------OTHER-----------------------------------------------------------------------------------------------------
func isValidURL(rawURL string) bool {
	logger.Debug.Println("isValidURL running")
	parsedURL, err := url.Parse(rawURL)
	if err != nil || parsedURL.Scheme != "https" {
		return false
	}
	if parsedURL.Host != "www.poizon.com" {
		return false
	}
	if !strings.HasPrefix(parsedURL.Path, "/product/") {
		return false
	}
	return true
}
func calculateShipCoastByProduct(callbackQuery *tgbotapi.CallbackQuery) {
	logger.Debug.Println("calculateShipCoastByProduct running")

	productPriceRaw, err := getUserData(callbackQuery.Message.Chat.ID, "productPriceRaw")
	if err != nil {
		logger.Error.Println(err)
	}
	productPriceFloat, err := strconv.ParseFloat(productPriceRaw, 64)

	if err != nil {
		logger.Error.Println(err)
	}
	productCategory, err := getUserData(callbackQuery.Message.Chat.ID, "productCategory")
	if err != nil {
		logger.Error.Println(err)
	}
	resultPrice := CnyExRate(productPriceFloat) + getCoast(productCategory)

	setUserData(callbackQuery.Message.Chat.ID, "productPrice", strconv.FormatFloat(resultPrice, 'f', 0, 64))
}
func handleShipCoast(bot *tgbotapi.BotAPI, callbackQuery *tgbotapi.CallbackQuery, context *UserContext) {
	logger.Debug.Println("handleShipCoast running")
	calculateShipCoastByProduct(callbackQuery)
	resultPrice, err := getUserData(callbackQuery.Message.Chat.ID, "productPrice")
	if err != nil {
		logger.Error.Println(err)
	}
	msgText := fmt.Sprintf("–†–∞—Å—á—ë—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ %s —Ä—É–±.", resultPrice)
	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, msgText)
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ò∞", "backMainMenu")))

	_, err = bot.Send(msg)
	if err != nil {
		somethingWentWrong(bot, callbackQuery.Message)
		logger.Error.Println(err)
	}
}

func generateOrderKey(prefix string, length int) (string, error) {
	part1, err := generateRandomString(length)
	if err != nil {
		return "", err
	}
	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –∫–ª—é—á–∞
	part2, err := generateRandomString(length)
	if err != nil {
		return "", err
	}
	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞

	orderKey := fmt.Sprintf("%s%s-%s", prefix, part1, part2)
	return orderKey, nil
}
func generateRandomString(length int) (string, error) {
	letterBytes := "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	var result string
	for i := 0; i < length; i++ {
		index, err := rand.Int(rand.Reader, big.NewInt(int64(len(letterBytes))))
		if err != nil {
			return "", err
		}
		result += string(letterBytes[index.Int64()])
	}
	return result, nil
}
